struct line (m  ,d  ,p1 ,p2)
struct point (x ,y)

func getLine (p1 ,p2)
	return newLine  = 
		m = (p2.y - p1.y) / (p2.x - p1.x)
		d = m * (-p1.x) + p1.y

func pointMakeLine (l ,p) 
	if p.y = l.m * px + l.d
		return true
	else
		return false

func pointInSpicificLine (l ,p)
	if (pointMakeLine (l ,p)) and
		(((p.x - l.p1.x) * (p.x - l.p2.x) <= 0 )
		or ((p.y - l.p1.y) * (p.y - l.p2.y) <=0 ))
		return true
	else
		return false


func ttabk2lines (l1 ,l2)
	if l1.m = l2.m and l1.d = l2.d
		and ((l1.p1 = l2.p1 and l1.p2 = l2.p2) or (l1.p1 = l2.p2 and l1.p2 = l2.p1))
		return true

func halfTtabk2linesWithAdd (l1 ,l2)
	if ((l1.m = l2.m and l1.d = l2.d)
		and (((l1.p1 = l2.p1) and (pointInSpicificLine (l1 , l2.p2)))
		return true and "add l2.p"
	else
		return false

func halfTtabk2linesWithNoAdd (l1 ,l2)
	if ((l1.m = l2.m and l1.d = l2.d)
		and (((l1.p2 = l2.p2) and (pointInSpicificLine (l1 , l2.p1))) 
		return true and "not point to add"
	else
		return false

func getTkat3Point (l1 ,l2)
	if l1.m = l2.m 
		return false
	else
		define x = (l2.d - l1.d) / (l1.m - l2.m)
		define y = l1.m * x + l1.d

		return (x , y)
func tkat3End (l1 ,l2 ,p)
	if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p2 = p) and (l1.p1 != p)
		return true "end line point ALLOW and add end point"
	else
		return false

func tkat3Start (l1 ,l2 ,p)
	if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p1 = p)
		return true "its the start point ALLOW"
	else 
		return false

func tkat3Out (l1 ,l2 ,p)
	else if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p2 != p)
		return true "out of boundryy FALSEEEEEE"
	else
		return false


func typeOfTkat3 (l1 ,l2 ,p)
	if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p2 = p) and (l1.p1 != p)
		return "end line point ALLOW and add end point"
	else if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p1 = p)
		return "its the start point ALLOW"
	else if (pointInSpicificLine (l1 ,p)) and (pointInSpicificLine (l2 ,p)) and 
		(l2.p2 != p)
		return "out if shape NOT ALLOW"'
	else
		return "in line ALLOW"

func topLeftPoint (shapeListOfPoint  , maxPoint)
	if shapeListOfPoint = null
		return maxPoint
	if maxPoint = null
		maxPoint = shapeListOfPoint.hd
		topLeftPoint (shapeListOfPoint.tl  , maxPoint)
	else
		if shapeListOfPoint.hd.y > maxPoint.y
			topLeftPoint (shapeListOfPoint.tl  , shapeListOfPoint.hd)
		else if shapeListOfPoint.hd.y  = maxPoint.y and shapeListOfPoint.hd.x < maxPoint.x
			topLeftPoint (shapeListOfPoint.tl  , shapeListOfPoint.hd)
		else
			topLeftPoint (shapeListOfPoint.tl  , maxPoint)

func makeGoodShapeList (shapeListOfPoint)
	maxPoint = topLeftPoint (shapeListOfPoint , null)
	if shapeListOfPoint.hd = maxPoint
		return shapeListOfPoint
	else
		makeGoodShapeList (append ((shapeListOfPoint.tl) , (shapeListOfPoint.hd))

func getHighWidthSheft(p1 , p2)
	x = p1.x - p2.x
	y = p1.y - p2.y
	return (x , y)

func shiftShape (shapeListOfPoint , x , y)
	define newShape
	forEach point in shapeListOfPoint
		newShape.add (point.x -x point.y -y)
	return newShape

func fixShape (shapeListOfPoint)
	newLine = (getLine (shapeListOfPoint.hd , shapeListOfPoint.tl.tl.hd))
	if pointInSpicificLine (newLine , shapeListOfPoint.tl.hd)
		delete shapeListOfPoint.tl.hd
		fixShape (shapeListOfPoint.tl.tl)
	else
		fixShape (shapeListOfPoint.tl)

func clearRepeatedPoints (shapeListOfPoint)
	if shapeListOfPoint.hd = shapeListOfPoint.tl.hd 
		delete shapeListOfPoint.hd
	else continue sacaaning until end of shape


func lineShapeState (l1 , shapeListOfPoint , shapeListOfPointMain)
	define endpoint = false 
	define startPoint = false
	define addresult ='()
	define removeresult = '()
	define l2 = null
	while(endpoint == false){
	
	if shapeListOfPoint.tl == null
		endpoint = true
		l2 = getLine (shapeListOfPoint.hd , shapeListOfPointMain.hd)
	else
		l2 = getLine (shapeListOfPoint.hd , shapeListOfPoint.tl.hd)
		shapeListOfPoint = shapeListOfPoint.tl

	if ttabk2lines (l2 , l1)
		removeresult += '(l1.p1 , l1.p2)
		return list (addresult removeresult)
	else if halfTtabk2linesWithAdd (l2 , l1)
		removeresult += '(l1.p1 )
		result += '(l1.p2)
		return list (addresult removeresult)
	else if halfTtabk2linesWithNoAdd (l2 , l1)
		return list (addresult removeresult)
	else 
		define tkat3Point = getTkat3Point (l2 , l1)
		if tkat3End (l2 , l1 , tkat3Point )
			result += '(l1.p2)
		else if tkat3Start (l2 , l1 , tkat3Point ) and startPoint == false
			startPoint = true
		else if tkat3Start (l2 , l1 , tkat3Point ) and startPoint == true
			result +='(l1.p1)
		else if tkat3Out (l2 , l1 , tkat3Point )
			return false Rais EXPTION
		else
			result +='(l1.p2)
			}
	return list (addresult removeresult)
	
func shapeToShapeState (smallShape , smallShape2 , mainShape)
	define endpoint = false
	while (endpoint ==false) {
	if smallShape.tl == null
		endpoint = true
		l = getLine (smallShape.hd , smallShape2.hd)
	else
		l = getLine (smallShape.hd , smallShape.tl.hd)
		smallShape = smallShape.tl
	resultlist = lineShapeState (l , mainShape , mainShape )
	}













